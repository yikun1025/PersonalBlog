"use strict";(self.webpackChunkzxuqian_cn=self.webpackChunkzxuqian_cn||[]).push([[9251],{5016:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var n=r(8168),i=(r(6540),r(5680));const a={},s=void 0,o={unversionedId:"course/computer-system/HardWare-Simulation",id:"course/computer-system/HardWare-Simulation",title:"HardWare-Simulation",description:"Array of Bits",source:"@site/docs/course/computer-system/03-HardWare-Simulation.md",sourceDirName:"course/computer-system",slug:"/course/computer-system/HardWare-Simulation",permalink:"/docs/course/computer-system/HardWare-Simulation",draft:!1,editUrl:"https://github.com/zxuqian/zxuqian.cn/tree/master/docs/course/computer-system/03-HardWare-Simulation.md",tags:[],version:"current",lastUpdatedAt:1742659443,formattedLastUpdatedAt:"2025/3/22",sidebarPosition:3,frontMatter:{},sidebar:"docs",previous:{title:"Logic Gates",permalink:"/docs/course/computer-system/02-Logic-Gates"},next:{title:"Reepresenting Numbers",permalink:"/docs/course/computer-system/04-Reepresenting-Numbers"}},l={},u=[{value:"Array of Bits",id:"array-of-bits",level:4},{value:"sub-buses",id:"sub-buses",level:4},{value:"sub-buses Applications in Nand2Tetris",id:"sub-buses-applications-in-nand2tetris",level:4},{value:"Multiplexor",id:"multiplexor",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...r}=e;return(0,i.yg)(c,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h4",{id:"array-of-bits"},"Array of Bits"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"sometimes we manipulate an array of bits"),(0,i.yg)("li",{parentName:"ul"},"it is conceptually convenient"),(0,i.yg)("li",{parentName:"ul"},"UDL will usually provide some convenient notation for handling these buses")),(0,i.yg)("h4",{id:"sub-buses"},"sub-buses"),(0,i.yg)("p",null,"In digital design and hardware description languages (HDLs), sub-buses refer to a subset or slice of bits within a larger bus. A bus is a collection of signals that are grouped together and typically represented as a single entity with multiple bits."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Buses can be composed from sub-buses"),(0,i.yg)("li",{parentName:"ul"},"some syntactic choices of our HDL",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"overlaps of sub-buses are allowed on output buses of parts"),(0,i.yg)("li",{parentName:"ul"},"width of internal pins is deduced automatically"),(0,i.yg)("li",{parentName:"ul"},'"false" and "true" may be used as buses of any width')))),(0,i.yg)("h4",{id:"sub-buses-applications-in-nand2tetris"},"sub-buses Applications in Nand2Tetris"),(0,i.yg)("p",null,"In the context of Nand2Tetris specifically, sub-buses are particularly important when:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Building the ALU (Arithmetic Logic Unit) where you might need to manipulate different parts of the inputs"),(0,i.yg)("li",{parentName:"ol"},"Working with the instruction decoder where different fields of the instruction word represent different parts of the instruction"),(0,i.yg)("li",{parentName:"ol"},"Implementing memory addressing where portions of an address might refer to different memory components")),(0,i.yg)("p",null,"For example, in the Hack computer architecture (used in Nand2Tetris), a 16-bit instruction might be divided into:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"==Bits 15-13==: Instruction type"),(0,i.yg)("li",{parentName:"ul"},"==Bits 12-6==: Various control bits"),(0,i.yg)("li",{parentName:"ul"},"==Bits 5-0==: Address bits")),(0,i.yg)("p",null,"lsb: least significant byte\nmsb: most significant byte"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-hdl"},"Add(a[0..7]) = lsb, a[8..15] = msb, b =..., out=...);\n")),(0,i.yg)("h3",{id:"multiplexor"},"Multiplexor"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"two inputs coming in, and third input sel")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"sel = 0, multiplexor outputs a ")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"sel = 1,  multiplexor outputs b")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"a 2-way multiplexor enables selecting and outputting one out of two possible inputs")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"widely used in:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"digital design"),(0,i.yg)("li",{parentName:"ul"},"communication networks")))))}m.isMDXComponent=!0},5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>d});var n=r(6540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(r),y=i,d=c["".concat(l,".").concat(y)]||c[y]||m[y]||a;return r?n.createElement(d,s(s({ref:t},p),{},{components:r})):n.createElement(d,s({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=y;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"}}]);