"use strict";(self.webpackChunkzxuqian_cn=self.webpackChunkzxuqian_cn||[]).push([[9421],{5680:(a,e,n)=>{n.d(e,{xA:()=>g,yg:()=>u});var s=n(6540);function t(a,e,n){return e in a?Object.defineProperty(a,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[e]=n,a}function m(a,e){var n=Object.keys(a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.push.apply(n,s)}return n}function r(a){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?m(Object(n),!0).forEach((function(e){t(a,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(n,e))}))}return a}function p(a,e){if(null==a)return{};var n,s,t=function(a,e){if(null==a)return{};var n,s,t={},m=Object.keys(a);for(s=0;s<m.length;s++)n=m[s],e.indexOf(n)>=0||(t[n]=a[n]);return t}(a,e);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(a);for(s=0;s<m.length;s++)n=m[s],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(a,n)&&(t[n]=a[n])}return t}var l=s.createContext({}),i=function(a){var e=s.useContext(l),n=e;return a&&(n="function"==typeof a?a(e):r(r({},e),a)),n},g=function(a){var e=i(a.components);return s.createElement(l.Provider,{value:e},a.children)},y="mdxType",N={inlineCode:"code",wrapper:function(a){var e=a.children;return s.createElement(s.Fragment,{},e)}},o=s.forwardRef((function(a,e){var n=a.components,t=a.mdxType,m=a.originalType,l=a.parentName,g=p(a,["components","mdxType","originalType","parentName"]),y=i(n),o=t,u=y["".concat(l,".").concat(o)]||y[o]||N[o]||m;return n?s.createElement(u,r(r({ref:e},g),{},{components:n})):s.createElement(u,r({ref:e},g))}));function u(a,e){var n=arguments,t=e&&e.mdxType;if("string"==typeof a||t){var m=n.length,r=new Array(m);r[0]=o;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=a,p[y]="string"==typeof a?a:t,r[1]=p;for(var i=2;i<m;i++)r[i]=n[i];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}o.displayName="MDXCreateElement"},7962:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>N,frontMatter:()=>m,metadata:()=>p,toc:()=>i});var s=n(8168),t=(n(6540),n(5680));const m={slug:"04-Reepresenting-Numbers",title:"Reepresenting Numbers",sidebar_label:"Reepresenting Numbers",date:new Date("2025-03-15T00:00:00.000Z")},r=void 0,p={unversionedId:"course/computer-system/Representing-Numbers",id:"course/computer-system/Representing-Numbers",title:"Reepresenting Numbers",description:"Binary numbers",source:"@site/docs/course/computer-system/04-Representing-Numbers.md",sourceDirName:"course/computer-system",slug:"/course/computer-system/04-Reepresenting-Numbers",permalink:"/PersonalBlog/docs/course/computer-system/04-Reepresenting-Numbers",draft:!1,editUrl:"https://github.com/zxuqian/zxuqian.cn/tree/master/docs/course/computer-system/04-Representing-Numbers.md",tags:[],version:"current",lastUpdatedAt:1742658414,formattedLastUpdatedAt:"2025/3/22",sidebarPosition:4,frontMatter:{slug:"04-Reepresenting-Numbers",title:"Reepresenting Numbers",sidebar_label:"Reepresenting Numbers",date:"2025-03-15T00:00:00.000Z"},sidebar:"docs",previous:{title:"HardWare-Simulation",permalink:"/PersonalBlog/docs/course/computer-system/HardWare-Simulation"},next:{title:"Negative-Numbers",permalink:"/PersonalBlog/docs/course/computer-system/Negative-Numbers"}},l={},i=[{value:"Binary numbers",id:"binary-numbers",level:4},{value:"Fixed word size",id:"fixed-word-size",level:4},{value:"Binary adding numbers",id:"binary-adding-numbers",level:4},{value:"Building an Adder",id:"building-an-adder",level:2},{value:"Half Addr",id:"half-addr",level:3},{value:"Full Adder",id:"full-adder",level:3},{value:"Inputs and Outputs",id:"inputs-and-outputs",level:4},{value:"Truth Table",id:"truth-table",level:4},{value:"16 bit Adder",id:"16-bit-adder",level:4}],g={toc:i},y="wrapper";function N(a){let{components:e,...n}=a;return(0,t.yg)(y,(0,s.A)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,t.yg)("h4",{id:"binary-numbers"},"Binary numbers"),(0,t.yg)("p",null,(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("msub",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msub"},"b"),(0,t.yg)("mi",{parentName:"msub"},"n")),(0,t.yg)("msub",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msub"},"b"),(0,t.yg)("mo",{parentName:"msub",stretchy:"false"},"(")),(0,t.yg)("mi",{parentName:"mrow"},"n"),(0,t.yg)("mo",{parentName:"mrow"},"\u2212"),(0,t.yg)("mn",{parentName:"mrow"},"1"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,t.yg)("msub",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msub"},"b"),(0,t.yg)("mo",{parentName:"msub",stretchy:"false"},"(")),(0,t.yg)("mi",{parentName:"mrow"},"n"),(0,t.yg)("mo",{parentName:"mrow"},"\u2212"),(0,t.yg)("mn",{parentName:"mrow"},"2"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,t.yg)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,t.yg)("msub",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msub"},"b"),(0,t.yg)("mn",{parentName:"msub"},"1")),(0,t.yg)("msub",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msub"},"b"),(0,t.yg)("mn",{parentName:"msub"},"0")),(0,t.yg)("mo",{parentName:"mrow"},"="),(0,t.yg)("msub",{parentName:"mrow"},(0,t.yg)("mo",{parentName:"msub"},"\u2211"),(0,t.yg)("mi",{parentName:"msub"},"i")),(0,t.yg)("msub",{parentName:"mrow"},(0,t.yg)("mi",{parentName:"msub"},"b"),(0,t.yg)("mi",{parentName:"msub"},"i")),(0,t.yg)("mo",{parentName:"mrow"},"\u2217"),(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mn",{parentName:"msup"},"2"),(0,t.yg)("mi",{parentName:"msup"},"i"))),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"b_nb_(n-1)b_(n-2)...b_1b_0= \\sum_i b_i*2^i")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1.0496em",verticalAlign:"-0.3552em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,t.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,t.yg)("span",{parentName:"span"})))))),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3448em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-2.5198em",marginLeft:"0em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mopen mtight"},"(")))),(0,t.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3552em"}},(0,t.yg)("span",{parentName:"span"})))))),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.yg)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1.1052em",verticalAlign:"-0.3552em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"1"),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3448em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-2.5198em",marginLeft:"0em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mopen mtight"},"(")))),(0,t.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3552em"}},(0,t.yg)("span",{parentName:"span"})))))),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.yg)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"2"),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"),(0,t.yg)("span",{parentName:"span",className:"mord"},"..."),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,t.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,t.yg)("span",{parentName:"span"})))))),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,t.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,t.yg)("span",{parentName:"span"})))))),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.yg)("span",{parentName:"span",className:"mrel"},"="),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1.0497em",verticalAlign:"-0.2997em"}}),(0,t.yg)("span",{parentName:"span",className:"mop"},(0,t.yg)("span",{parentName:"span",className:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"\u2211"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.162em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-2.4003em",marginLeft:"0em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,t.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.2997em"}},(0,t.yg)("span",{parentName:"span"})))))),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,t.yg)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,t.yg)("span",{parentName:"span"})))))),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.yg)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.8247em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord"},"2"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.8247em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"))))))))))))),(0,t.yg)("p",null,"Maximum with k bits is 1+2+4...+",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mn",{parentName:"msup"},"2"),(0,t.yg)("mo",{parentName:"msup",stretchy:"false"},"(")),(0,t.yg)("mi",{parentName:"mrow"},"k"),(0,t.yg)("mo",{parentName:"mrow"},"\u2212"),(0,t.yg)("mn",{parentName:"mrow"},"1"),(0,t.yg)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2^(k-1)")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.9713em",verticalAlign:"-0.0833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord"},"2"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.888em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mopen mtight"},"(")))))))),(0,t.yg)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.yg)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"1"),(0,t.yg)("span",{parentName:"span",className:"mclose"},")"))))),"= ",(0,t.yg)("span",{parentName:"p",className:"math math-inline"},(0,t.yg)("span",{parentName:"span",className:"katex"},(0,t.yg)("span",{parentName:"span",className:"katex-mathml"},(0,t.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,t.yg)("semantics",{parentName:"math"},(0,t.yg)("mrow",{parentName:"semantics"},(0,t.yg)("msup",{parentName:"mrow"},(0,t.yg)("mn",{parentName:"msup"},"2"),(0,t.yg)("mi",{parentName:"msup"},"k")),(0,t.yg)("mo",{parentName:"mrow"},"\u2212"),(0,t.yg)("mn",{parentName:"mrow"},"1")),(0,t.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2^k-1")))),(0,t.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.9324em",verticalAlign:"-0.0833em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},(0,t.yg)("span",{parentName:"span",className:"mord"},"2"),(0,t.yg)("span",{parentName:"span",className:"msupsub"},(0,t.yg)("span",{parentName:"span",className:"vlist-t"},(0,t.yg)("span",{parentName:"span",className:"vlist-r"},(0,t.yg)("span",{parentName:"span",className:"vlist",style:{height:"0.8491em"}},(0,t.yg)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,t.yg)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,t.yg)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,t.yg)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03148em"}},"k")))))))),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.yg)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,t.yg)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,t.yg)("span",{parentName:"span",className:"base"},(0,t.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,t.yg)("span",{parentName:"span",className:"mord"},"1")))))),(0,t.yg)("h4",{id:"fixed-word-size"},"Fixed word size"),(0,t.yg)("p",null,"we will use a fixed number of bits\n8 bits: possibilities "),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"2^7 = 128 for negative and positive numbers, 128+128=256"),(0,t.yg)("li",{parentName:"ul"},"unsigned 8 bit, 2^8 =256")),(0,t.yg)("p",null,"because we need a largest number bit to represent negative or positive"),(0,t.yg)("h4",{id:"binary-adding-numbers"},"Binary adding numbers"),(0,t.yg)("p",null,"we need deal with overflow in computer systems"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"BINARY ADDITION\nInput: Binary strings A, B\nOutput: Binary sum\n\n1. Make A and B the same length by adding zeros to the front of the shorter one\n2. Start with carry = 0\n3. Begin from the rightmost bits and move left:\n   - For each position:\n     * Sum the bits at current position and the carry\n     * If sum is 0 or 1, this is the result bit and carry becomes 0\n     * If sum is 2, result bit is 0 and carry becomes 1\n     * If sum is 3, result bit is 1 and carry becomes 1\n4. If there's a final carry, add it as a new leftmost bit\n5. Return the result\n")),(0,t.yg)("h2",{id:"building-an-adder"},"Building an Adder"),(0,t.yg)("h3",{id:"half-addr"},"Half Addr"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"Half Adder- adds two bits"),(0,t.yg)("li",{parentName:"ol"},"Full Adder - adds three bits"),(0,t.yg)("li",{parentName:"ol"},"Adder - Adds two numbers")),(0,t.yg)("p",null,"A half adder is a basic digital circuit used in computing for binary addition. It adds two single binary digits (bits) and produces two outputs:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"Sum (S): The result of adding the two input bits (A and B)"),(0,t.yg)("li",{parentName:"ol"},"Carry (C): The carry bit that is generated when the sum exceeds 1")),(0,t.yg)("p",null,'The half adder is called "half" because it can only add two bits and doesn\'t account for a carry input from a previous addition. When you need to add multiple bits or handle carry inputs, you would use a full adder, which combines two half adders and includes a carry input.'),(0,t.yg)("p",null,"In digital circuit design, half adders serve as fundamental building blocks for creating more complex arithmetic circuits"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"A   -----|\n         |-- Half Addr1 -- Sum1 -----|\nB   -----|                        |-- Hafl Addr2 --- Final Sum\n                                  |\nCin -------------------------------\n         |\n         |-- Half Addr1 carry -----|\n                                 |-- OR gate --- Final Carry\n         |-- Half Addr2 Carry -----|\n")),(0,t.yg)("h3",{id:"full-adder"},"Full Adder"),(0,t.yg)("p",null,"A full adder is a fundamental digital circuit used in computing that performs binary addition of three bits: two input bits (A and B) and a carry-in bit (Cin) from a previous addition. It produces two outputs: a sum bit (Sum) and a carry-out bit (Cout)."),(0,t.yg)("h4",{id:"inputs-and-outputs"},"Inputs and Outputs"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Inputs"),": A, B, Cin (carry-in)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Outputs"),": Sum, Cout (carry-out)")),(0,t.yg)("h4",{id:"truth-table"},"Truth Table"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"A"),(0,t.yg)("th",{parentName:"tr",align:null},"B"),(0,t.yg)("th",{parentName:"tr",align:null},"Cin"),(0,t.yg)("th",{parentName:"tr",align:null},"Sum"),(0,t.yg)("th",{parentName:"tr",align:null},"Cout"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"0")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"1")))),(0,t.yg)("p",null,"==Boolean Expressions=="),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Sum = A \u2295 B \u2295 Cin (XOR of all three inputs)")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Cout = (A\xb7B) + (Cin\xb7(A\u2295B)) (Carry logic)"),(0,t.yg)("p",{parentName:"li"}," ==Implementation==\nA full adder can be constructed using:"))),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"Two half adders"),(0,t.yg)("li",{parentName:"ol"},"One OR gate")),(0,t.yg)("p",null,"The implementation logic is:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"First half adder processes inputs A and B"),(0,t.yg)("li",{parentName:"ul"},"Second half adder takes the sum from the first half adder and Cin"),(0,t.yg)("li",{parentName:"ul"},"The final Sum is the output of the second half adder"),(0,t.yg)("li",{parentName:"ul"},"The final Cout is the OR of both half adders' carry outputs")),(0,t.yg)("h4",{id:"16-bit-adder"},"16 bit Adder"),(0,t.yg)("p",null,"A 16-bit adder is a digital circuit that performs binary addition of two 16-bit numbers. It's a fundamental component in computer arithmetic units and forms a critical part of most processor architectures."),(0,t.yg)("p",null,"A 16-bit adder consists of 16 full adders connected in a chain, with each full adder handling one bit position. The chain works as follows:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"The least significant bit (LSB) full adder receives the two least significant bits of the input numbers and a carry-in typically set to 0"),(0,t.yg)("li",{parentName:"ol"},"Each subsequent full adder processes its corresponding bit position and receives the carry-out from the previous stage as its carry-in"),(0,t.yg)("li",{parentName:"ol"},"The most significant bit (MSB) full adder produces the final sum bit and a carry-out that represents overflow")),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"overflow = carry_in_to_MSB XOR carry_out_from_MSB")))}N.isMDXComponent=!0}}]);