"use strict";(self.webpackChunkzxuqian_cn=self.webpackChunkzxuqian_cn||[]).push([[5834],{5680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>g});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=n(8168),o=(n(6540),n(5680));const a={slug:"01-hack-computer-introduction",title:"Hack Computer Introduction",sidebar_label:"Hack Computer Introduction",date:new Date("2025-03-02T00:00:00.000Z")},i=void 0,c={unversionedId:"course/computer-system/Hack-Computer-Introduction",id:"course/computer-system/Hack-Computer-Introduction",title:"Hack Computer Introduction",description:"Hack computer consists of ROM, CPU and RAM.",source:"@site/docs/course/computer-system/01-Hack-Computer-Introduction.md",sourceDirName:"course/computer-system",slug:"/course/computer-system/01-hack-computer-introduction",permalink:"/docs/course/computer-system/01-hack-computer-introduction",draft:!1,editUrl:"https://github.com/zxuqian/zxuqian.cn/tree/master/docs/course/computer-system/01-Hack-Computer-Introduction.md",tags:[],version:"current",lastUpdatedAt:1742656985,formattedLastUpdatedAt:"2025/3/22",sidebarPosition:1,frontMatter:{slug:"01-hack-computer-introduction",title:"Hack Computer Introduction",sidebar_label:"Hack Computer Introduction",date:"2025-03-02T00:00:00.000Z"},sidebar:"docs",next:{title:"Logic Gates",permalink:"/docs/course/computer-system/02-Logic-Gates"}},s={},u=[{value:"Core Concept",id:"core-concept",level:2},{value:"assembly language",id:"assembly-language",level:3},{value:"Rich language:",id:"rich-language",level:3}],l={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.yg)(p,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Hack computer consists of ROM, CPU and RAM."),(0,o.yg)("p",null,'Nand2Tetris (sometimes written as "From NAND to Tetris" or "The Elements of Computing Systems") is an educational project and course that guides students through building a complete modern computer system from first principles. '),(0,o.yg)("h2",{id:"core-concept"},"Core Concept"),(0,o.yg)("p",null,"The fundamental idea behind Nand2Tetris is to build an entire modern computer system - from the basic NAND gate all the way up to a high-level programming language and operating system capable of running games like Tetris. The project follows a bottom-up approach where students construct each layer of the computing hierarchy using only components they've built in previous steps."),(0,o.yg)("p",null,"Nand2Tetris is widely used in computer science education and has been praised for its integrated approach to teaching computing fundamentals, making it accessible to students with diverse backgrounds while providing deep insights into how modern computers actually work."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Nand")," is the most basic component logic gate."),(0,o.yg)("p",null,"Engineers using hardware simulator to test scripts. "),(0,o.yg)("p",null,"week 1: basic logic gate\nweek2: ALU\nweek3: register, memory system\nWeek5: design an computer "),(0,o.yg)("p",null,"week 4: writing low-level "),(0,o.yg)("h3",{id:"assembly-language"},"assembly language"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"low-level language, not useful as high level language")),(0,o.yg)("h3",{id:"rich-language"},"Rich language:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"expressions, loop, data types"),(0,o.yg)("li",{parentName:"ul"},"classes, methods"),(0,o.yg)("li",{parentName:"ul"},"built in operations, I/O math")),(0,o.yg)("p",null,"we need construct a compiler and standard library"))}m.isMDXComponent=!0}}]);