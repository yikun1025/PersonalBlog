"use strict";(self.webpackChunkzxuqian_cn=self.webpackChunkzxuqian_cn||[]).push([[1508],{4896:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var i=a(8168),n=(a(6540),a(5680));const l={slug:"02-Logic-Gates",title:"Logic Gates",sidebar_label:"Logic Gates",date:new Date("2025-03-05T00:00:00.000Z")},r=void 0,o={unversionedId:"course/computer-system/Logic-Gates",id:"course/computer-system/Logic-Gates",title:"Logic Gates",description:"Basic Logic Gate",source:"@site/docs/course/computer-system/02-Logic-Gates.md",sourceDirName:"course/computer-system",slug:"/course/computer-system/02-Logic-Gates",permalink:"/docs/course/computer-system/02-Logic-Gates",draft:!1,editUrl:"https://github.com/zxuqian/zxuqian.cn/tree/master/docs/course/computer-system/02-Logic-Gates.md",tags:[],version:"current",lastUpdatedAt:1742659443,formattedLastUpdatedAt:"2025/3/22",sidebarPosition:2,frontMatter:{slug:"02-Logic-Gates",title:"Logic Gates",sidebar_label:"Logic Gates",date:"2025-03-05T00:00:00.000Z"},sidebar:"docs",previous:{title:"Hack Computer Introduction",permalink:"/docs/course/computer-system/01-hack-computer-introduction"},next:{title:"HardWare-Simulation",permalink:"/docs/course/computer-system/HardWare-Simulation"}},u={},s=[{value:"Basic Logic Gate",id:"basic-logic-gate",level:3},{value:"X AND y",id:"x-and-y",level:4},{value:"X OR y",id:"x-or-y",level:4},{value:"NOTX",id:"notx",level:4},{value:"NAND",id:"nand",level:4},{value:"XOR",id:"xor",level:4},{value:"Boolean Identities",id:"boolean-identities",level:3},{value:"Commutative Laws",id:"commutative-laws",level:4},{value:"Associative Laws",id:"associative-laws",level:4},{value:"Distributive Laws",id:"distributive-laws",level:4},{value:"De Morgan Laws",id:"de-morgan-laws",level:4},{value:"Boolean Algebra",id:"boolean-algebra",level:3},{value:"Gate Logic",id:"gate-logic",level:3},{value:"Gate Interface/Gate Implementation",id:"gate-interfacegate-implementation",level:3},{value:"Circuit Implementations",id:"circuit-implementations",level:3},{value:"HDL",id:"hdl",level:3},{value:"test script",id:"test-script",level:4},{value:"simulation process",id:"simulation-process",level:4}],c={toc:s},p="wrapper";function g(e){let{components:t,...a}=e;return(0,n.yg)(p,(0,i.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h3",{id:"basic-logic-gate"},"Basic Logic Gate"),(0,n.yg)("h4",{id:"x-and-y"},"X AND y"),(0,n.yg)("p",null,"And operation takes two 0, 1 signals, only return 1 When both input is 1"),(0,n.yg)("h4",{id:"x-or-y"},"X OR y"),(0,n.yg)("p",null,"or operation takes two 0, 1 signals,  return 1 When either input is 1"),(0,n.yg)("h4",{id:"notx"},"NOTX"),(0,n.yg)("p",null,"unit operation, returns the opposite of the value."),(0,n.yg)("h4",{id:"nand"},"NAND"),(0,n.yg)("p",null,'A ==NAND== gate is a fundamental digital logic gate that produces an output which is the inverse of the AND operation. NAND stands for "NOT AND" and it\'s considered a universal gate, meaning any other logic gate (AND, OR, NOT, XOR, etc.) can be constructed using only NAND gates.'),(0,n.yg)("p",null,"==Universal Gate Property== "),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"NAND gates can implement any Boolean function, making them extremely versatile. For example:")),(0,n.yg)("p",null,"==Boolean Expression== "),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"NOT gate: Connect both inputs of a NAND gate together"),(0,n.yg)("li",{parentName:"ul"},"AND gate: Output of a NAND gate fed into a NOT gate (or another NAND)"),(0,n.yg)("li",{parentName:"ul"},"OR gate: Apply NOT to each input, then feed into a NAND gate")),(0,n.yg)("p",null,"(x NAND y) = NOT(x AND y)"),(0,n.yg)("h4",{id:"xor"},"XOR"),(0,n.yg)("p",null,"An XOR (Exclusive OR) gate is a digital logic gate that outputs true (1) only when the number of true inputs is odd. For a two-input XOR gate, this means the output is true if exactly one of the inputs is true, but not both."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"XOR produces a true output when inputs differ"),(0,n.yg)("li",{parentName:"ul"},"If inputs are the same (both 0 or both 1), the output is 0"),(0,n.yg)("li",{parentName:"ul"},"output 1 if the two input are different.")),(0,n.yg)("p",null,"==Boolean Expression== "),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"XOR is typically written as A\u2295B or A^B"),(0,n.yg)("li",{parentName:"ul"},"It can also be expressed as (A AND NOT B) OR (NOT A AND B)")),(0,n.yg)("p",null,"XOR gates have numerous practical applications:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Parity checking and generation in error detection systems"),(0,n.yg)("li",{parentName:"ul"},"Binary addition (the sum bit in a half adder is an XOR of the inputs)"),(0,n.yg)("li",{parentName:"ul"},"Comparators (to determine if two bits are different)"),(0,n.yg)("li",{parentName:"ul"},"Encryption algorithms (XOR is used in many cryptographic protocols)"),(0,n.yg)("li",{parentName:"ul"},"Random number generation")),(0,n.yg)("h3",{id:"boolean-identities"},"Boolean Identities"),(0,n.yg)("h4",{id:"commutative-laws"},"Commutative Laws"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(x AND y) = (y AND x)"),(0,n.yg)("li",{parentName:"ul"},"(x OR y) = (y OR x)")),(0,n.yg)("h4",{id:"associative-laws"},"Associative Laws"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(x AND (y AND z)) = ((x AND y) AND z)"),(0,n.yg)("li",{parentName:"ul"},"(x OR (y OR z)) = ((x OR y) OR z)")),(0,n.yg)("h4",{id:"distributive-laws"},"Distributive Laws"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(x AND (y OR z)) = ((x AND y) OR (x AND z)"),(0,n.yg)("li",{parentName:"ul"},"(x OR (y OR z)) = ((x OR y) OR (y OR z))")),(0,n.yg)("h4",{id:"de-morgan-laws"},"De Morgan Laws"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"NOT (x AND y) = NOT(x) OR NOT(y)"),(0,n.yg)("li",{parentName:"ul"},"NOT(x OR y) = NOT(x) AND NOT(y)")),(0,n.yg)("h3",{id:"boolean-algebra"},"Boolean Algebra"),(0,n.yg)("p",null,"NOT(NOT(x) AND NOT(x OR y)) = x OR y"),(0,n.yg)("h3",{id:"gate-logic"},"Gate Logic"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"a technique for implementing Boolean functions using logic gates"),(0,n.yg)("li",{parentName:"ul"},"simple chip: well-defined funcitionality"),(0,n.yg)("li",{parentName:"ul"},"Elementary(Nand, And, Or, Not)"),(0,n.yg)("li",{parentName:"ul"},"Composite(Mux, Adder, ...)")),(0,n.yg)("h3",{id:"gate-interfacegate-implementation"},"Gate Interface/Gate Implementation"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"one obstruction, maybe several different implementations")),(0,n.yg)("h3",{id:"circuit-implementations"},"Circuit Implementations"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"hardware specific architecture"),(0,n.yg)("li",{parentName:"ul"},"light bulb will bright only if two switches are open(NAND)")),(0,n.yg)("h3",{id:"hdl"},"HDL"),(0,n.yg)("p",null,"HDL (Hardware Description Language) is a specialized programming language used to describe the structure and behavior of electronic circuits and systems, particularly digital logic circuits. Unlike traditional programming languages that describe algorithms to be executed by a processor, HDLs describe the physical hardware structure and behavior."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"interface and parts"),(0,n.yg)("li",{parentName:"ul"},"textual description  of chip"),(0,n.yg)("li",{parentName:"ul"},"not unique, can be implemented in typically many ways"),(0,n.yg)("li",{parentName:"ul"},"good documentation, good descriptive names, readable"),(0,n.yg)("li",{parentName:"ul"},"functional declarative language, static description"),(0,n.yg)("li",{parentName:"ul"},"procedural  part is not part of the HDL code")),(0,n.yg)("h4",{id:"test-script"},"test script"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"script-based simulation"),(0,n.yg)("li",{parentName:"ul"},"with/without output and compare files")),(0,n.yg)("h4",{id:"simulation-process"},"simulation process"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"load the hdl file into the hardware simulator"),(0,n.yg)("li",{parentName:"ul"},"enter values into the chip's input pins"),(0,n.yg)("li",{parentName:"ul"},"evaluate the chi's logic"),(0,n.yg)("li",{parentName:"ul"},"inspect the resulting values")))}g.isMDXComponent=!0},5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>m});var i=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},l=Object.keys(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)a=l[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=i.createContext({}),s=function(e){var t=i.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=s(e.components);return i.createElement(u.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},y=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(a),y=n,m=p["".concat(u,".").concat(y)]||p[y]||g[y]||l;return a?i.createElement(m,r(r({ref:t},c),{},{components:a})):i.createElement(m,r({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=y;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:n,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,a)}y.displayName="MDXCreateElement"}}]);